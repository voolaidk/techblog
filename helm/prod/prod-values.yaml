
rpm-application-deployment:
  ################################################
  ### Default values for RPM common Helm chart ###
  ################################################

  ## Deployment section
  ## For more information, refer to: https://kubernetes.io/docs/concepts/workloads/controllers/deployment

  ## Number of replicas for the deployment. The desired number of identical pods that should be running simultaneously.
  ## For more information, refer to: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset
  replicaCount: 1

  ## Container image configuration
  image:
    registry: kristjanvoolaid
    tag: v7
    pullPolicy: IfNotPresent

  ## Define a command or arguments for a container
  ## For more information, refer to: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container
  containerCommand: []

  containerArgs: []

  ## Container port configuration. Specifies the ports to open on the container.
  containerPorts:
    - name: api-port
      
      # Protocol used for the port. Options: TCP, UDP, SCTP.
      protocol: TCP

      # Port number on the container to expose. 
      port: 8081

  ## Deployment update strategy configuration 
  ## For more information, refer to: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
  deploymentUpdate:
    # Type of update strategy for the Deployment. Options: RollingUpdate, Recreate.
    type: RollingUpdate

    # The maximum number of pods that can be scheduled over the desired replicas.
    # Expressed as a percentage of the total number of replicas.
    maxSurge: 25%

    # The maximum number of pods that can be unavailable during the update process.
    # Expressed as a percentage of the total number of replicas.
    maxUnavailable: 25%

  ## List of volumes to be used in the Pod.
  ## You can define your persistent volumes here and then reference them in the "volumeMounts" section
  ## PersistentVolumeClaim has to be created before using volumes in deployment
  ## For more information, refer to: https://kubernetes.io/docs/tasks/configure-pod-container/configure-volume-storage
  volumes: []
    # - name: test-pvc
    #   persistentVolumeClaim:
    #     claimName: test-pvc

  ## List of volume mounts to be used in the container.
  ## Mounts specified volumes into the container's file system.
  volumeMounts: []
    # - name: test-pvc
    #   mountPath: /tmp

  ## Resource requests and limits for the container.
  resources:
    requests:
      memory: "128Mi"
      cpu: "50m"
    limits:
      memory: "1Gi"
      cpu: "500m"

  ## Container probes to check the health of the application running in the container.
  ## For more information, refer to: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes
  containerProbes:
    # Startup probe checks the container's health during its startup period.
    startupProbe:
      # The endpoint path for the startup probe.
      path: /health

      # The port on which the container exposes the startup probe. This can be describe as port number or name
      port: api-port  

      # Number of consecutive failures required to consider the probe as failed.
      failureThreshold: 10
      
      # How often (in seconds) to perform the startup probe.
      periodSeconds: 6

    # Liveness probe checks if the container is still running properly.
    livenessProbes:
      # The endpoint path for the liveness probe.
      path: /health

      # The port on which the container exposes the liveness probe. This can be describe as port number or name
      port: api-port

      # Number of consecutive failures required to consider the probe as failed.
      failureThreshold: 3
      
      # How often (in seconds) to perform the liveness probe.
      periodSeconds: 5

    # Readiness probe checks if the container is ready to receive traffic.
    readinessProbes:
      # The endpoint path for the readiness probe.
      path: /health

      # The port on which the container exposes the readiness probe. This can be describe as port number or name
      port: api-port

      # Number of consecutive failures required to consider the probe as failed.
      failureThreshold: 3

      # How often (in seconds) to perform the readiness probe.
      periodSeconds: 5


  ## Pod affinity and anti-affinity configuration.
  ## For more information, refer to: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}
  # nodeAffinity:
  #   requiredDuringSchedulingIgnoredDuringExecution:
  #     nodeSelectorTerms:
  #       - matchExpressions:
  #         - key: app
  #           operator: In
  #           values:
  #             - app-name
  # podAffinity:
  #   requiredDuringSchedulingIgnoredDuringExecution:
  #     - labelSelector:
  #         matchExpressions:
  #           - key: app-type
  #             operator: In
  #             values:
  #             - redis

  ## Topology spread constraints for pod placement.
  ## For more information, refer to: https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints
  topologySpreadConstraints: []
  #  - maxSkew: 1
  #     topologyKey: "topology.kubernetes.io/zone"
  #     whenUnsatisfiable: ScheduleAnyway
  #     labelSelector:
  #       matchLabels:
  #         app: app-name

  ## Labels to be added to the Pod.
  podLabels: {}
  # type: backend
  # env: prod

  ## Environment variables to be set in the container.
  containerEnv: []
  #   - name: DB_URL
  #     value: "db.example.com:3306"
  #   - name: DB_USER
  #     valueFrom:
  #       configMapKeyRef:
  #         name: app-env
  #         key: DB_USER
  #   - name: DB_PASSWORD
  #     valueFrom:
  #       secretKeyRef:
  #         name: app-secrets
  #         key: DB_PASSWORD

  ## Node selector to specify which nodes the Pod should be scheduled on.
  nodeSelector: {}

  ## Tolerations for the Pod to tolerate specific node taints.
  tolerations: []
  #   - key: app-type
  #     operator: "Equal"
  #     value: "app-name"
  #     effect: "NoSchedule"


  ## Deploment exposing section

  ## Service configuration for exposing the application
  ## For more information, refer to: https://kubernetes.io/docs/concepts/services-networking/service
  service:
    type: ClusterIP

    # Ports that the service should listen on
    ports:
      - protocol: TCP
        port:
          name: api-port
          number: 8081
        targetPort: 8081

  ## Ingress configuration for exposing the application. We use AWS ALB controller for autoamting the load balancer creation
  ## Ingress rules are synced with the service created before.
  ## For more information, refer to: https://kubernetes.io/docs/concepts/services-networking/ingress
  ## For more information about AWS ALB annotations, refer to: https://kubernetes-sigs.github.io/aws-load-balancer-controller
  ingress:
    enabled: false
    annotations: {}
    #   alb.ingress.kubernetes.io/scheme: internet-facing
    #   alb.ingress.kubernetes.io/target-type: ip
    #   alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443},{"HTTP":80}]'
    #   alb.ingress.kubernetes.io/certificate-arn: ALB_CERTIFICATE_ARN
    #   alb.ingress.kubernetes.io/healthcheck-path: /health
    #   alb.ingress.kubernetes.io/ssl-redirect: '443'
    labels: {}
    path: /
    pathType: Prefix
    service: {}
    #   name: app-name-service
    #   port:
    #     name: api-port

  ## Horizontal Pod Autoscaler (HPA) configuration for automatically adjusting the number of replicas based on resource metrics.
  ## For more information, refer to: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale
  hpa:
    enabled: false
    minReplicas: 1 
    maxReplicas: 3

    # Custom metrics or resource-based metrics for autoscaling (if any).
    metrics: []
    # - type: Resource
    #   resource:
    #     name: cpu
    #     target:
    #       type: Utilization
    #       averageUtilization: 80
    
    # Policies how to scale down deployment with HPA
    scalingBehaviors:
      scaleDown: {}
        # stabilizationWindowSeconds: 300
        # policies: []
        # Example: Maximum of 1 pod can be removed in 60 seconds time period
        # - type: Pods
        #   value: 1
        #   periodSeconds: 60

      scaleUp: {}
        # stabilizationWindowSeconds: 0
        # policies: []
        # Example: Maximum of 4 pods can be added in 15 seconds time period
        # - periodSeconds: 15
        #   type: Pods
        #   value: 4

  ## Deployment addons section

  ## ConfigMap to be created. Can be useful if you would like to refer to configMap in deployment
  configMap:
    annotations: {}
    data: {}

  ## PersistentVolumeClaim
  ## We have preconfigured storageClass in our cluster, so in order to use persistence just configure persistentVolumeClaim.
  ## Available storageClasses are gp2 and gp2-encrypted
  ## For more information, refer to: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims 
  persistentVolumeClaim: {}
  #   accessModes: ReadWriteMany
  #   storageClassName: gp2-encrypted
  #   storage: 2Gi